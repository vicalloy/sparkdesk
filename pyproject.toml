[tool.poetry]
name = "sparkdesk"
version = "0.1.4"
description = ""
authors = ["vicalloy <zbirder@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.8"
websockets = "^11.0.3"
click = {version = "^8.1.7", optional = true}

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.2"
pytest-cov = "^4.1.0"
pre-commit = "^3.4.0"

[tool.poetry.extras]
cli = ["click"]

[tool.black]
line-length = 88
include = '\.pyi?$'
target-version = ['py38']
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
files = ["sparkdesk", ]
ignore_missing_imports = true
python_version = '3.10'

[tool.ruff]
fix = true
target-version = "py38"
select = [
    #    "A",  # flake8-builtins
    #    "ANN",  # flake8-annotations
    #    "ARG",  # flake8-unused-arguments
    "B",  # flake8-bugbear
    #    "BLE",  # flake8-blind-except
    "C",  # flake8-comprehensions
    #    "D",  # pydocstyle
    "E",  # pycodestyle errors
    #    "ERA",  # eradicate
    "F",  # pyflakes
    #    "FBT",  # flake8-boolean-trap
    "I",  # isort
    "ICN",  # flake8-import-conventions
    "N",  # pep8-naming
    #    "PGH",  # pygrep-hooks
    "PLC", "PLE", "PLR", "PLW",  # Pylint
    "Q",  # flake8-quotes
    "RET",  # flake8-return
    #    "RUF",  # Ruff-specific rules
    # "S",  # flake8-bandit
    #    "T",  # flake8-debugger
    #    "TID",  # flake8-tidy-imports
    "UP", # pyupgrade
    "W",  # pycodestyle warnings
]
ignore = [
    "C901",  # too complex
    "B905",  # `zip()` without an explicit `strict=` parameter
    "RET504",  # Unnecessary variable assignment before `return` statement
]

[tool.ruff.isort]
known-first-party = ["castle"]

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
